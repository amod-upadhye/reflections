checking file difference in Windows, to find bugs and changes

fc old_file_name new_file_name

start notepad++ using : start notepad++ file_name

an easy access to entire history can help you revert some of the unneccessary changes


git log .. shows all the changes done in the directory

git diff ... shows difference between two commit IDs
git diff .. shows difference between working area and staging area if no IDs are input
git diff --staged .. shows difference between staging area and most recent commit

git reset --hard .. resets all changes in staging directory or working area

git log --stat  ... shows statistics

git log shows the commits in descending order ... new commits on top older commits on bottom

git clone ... to copy directory 
keep commits small .. per logical change

git checkout ...switch to older commit and check if a bug was introduced in this commit
git checkout -b <New_Branch_Name> .. create new branch
git branch -d <branch_name> .. delete branch
git bash profile .. to setup git bash profile .. (colors / fonts etc.)

git init ... initialize git repository in an existing directory

git status .. shows changes since the last commit

//staging area .. tracks the files to be changed

git branch .. shows all branches
git branch <new-name> .. creates a new branch
git checkout <branch-name> .. switch to a particular branch

git merge <master> <branch_name> .. merges <branch_name> into <master>
git show <commit_id> shows the changes made in that commit
visual representation of the commit history is git log --graph --oneline master 

git remote .. shows if repo has a remote location
git remote add origin <<github address>>.. adds repo to remote with local reference name origin
git push origin master ... pushes master branch to remote origin

git commit message style guide
Type : subject
body 
footer
types --> feat, fix, docs, style, refactor, test, chore
http://udacity.github.io/git-styleguide/

